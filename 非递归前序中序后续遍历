#include <stdio.h>
#include <stdlib.h>
typedef enum { false, true } bool;

typedef char ElementType;
typedef struct TNode *Position;
typedef Position BinTree;
struct TNode{
    ElementType Data;
    BinTree Left;
    BinTree Right;
    int flag;
};

/*------堆栈的定义------*/
typedef Position SElementType;
typedef struct SNode *PtrToSNode;
struct SNode {
    SElementType Data;
    PtrToSNode Next;
};
typedef PtrToSNode Stack;

/* 裁判实现，细节不表 */
Stack CreateStack();
bool IsEmpty( Stack S );
bool Push( Stack S, SElementType X );
SElementType Pop( Stack S ); /* 删除并仅返回S的栈顶元素 */
SElementType Peek( Stack S );/* 仅返回S的栈顶元素 */
/*----堆栈的定义结束-----*/

BinTree CreateBinTree(); /* 裁判实现，细节不表 */
void InorderTraversal( BinTree BT );
void PreorderTraversal( BinTree BT );
void PostorderTraversal( BinTree BT );

int main()
{
    BinTree BT = CreateBinTree();
    printf("Inorder:");    InorderTraversal(BT);    printf("\n");
    printf("Preorder:");   PreorderTraversal(BT);   printf("\n");
    printf("Postorder:");  PostorderTraversal(BT);  printf("\n");
    return 0;
}
/* 你的代码将被嵌在这里 */
/* 你的代码将被嵌在这里 */
void InorderTraversal(BinTree BT) {
    Stack S = CreateStack();
    BinTree T = BT;
    while (T || !IsEmpty(S)) {
        while (T) {
            Push(S, T);
            T = T->Left;
        }
        if (!IsEmpty(S)) {
            T = Pop(S);
            printf(" %c", T->Data);
            T = T->Right;
        }
    }
}
/*中序遍历首先沿着左子树一直深入直到最左边的节点，然后打印当前节点的值，接着转向右子树。这个过程通过栈的辅助来实现。
具体来说，当栈不为空或者当前节点不为空时，首先将当前节点的所有左孩子压入栈中，
然后弹出栈顶节点并打印其值，最后将指针指向右孩子。*/
void PreorderTraversal(BinTree BT) {
    Stack S = CreateStack();
    BinTree T = BT;
    while (T || !IsEmpty(S)) {
        while (T) {
            printf(" %c", T->Data);
            Push(S, T);
            T = T->Left;
        }
        if (!IsEmpty(S)) {
            T = Pop(S);
            T = T->Right;
        }
    }
}
/*先序遍历是先打印当前节点的值，然后再依次遍历左子树和右子树。同样地，利用栈来辅助实现，
当栈不为空或当前节点不为空时，首先打印当前节点的值，然后将左孩子压入栈中，最后将指针指向左孩子。*/
void PostorderTraversal(BinTree BT) {
    Stack S = CreateStack();
    BinTree T = BT;
    Position last = NULL;
    while (T || !IsEmpty(S))
    {
        while (T) {
            Push(S, T);
            T = T->Left;
        }
        T = Peek(S);
        if (T->Right && T->Right != last) {
            T = T->Right;
        } else {
            T = Pop(S);
            printf(" %c", T->Data);
            last = T;
            T = NULL;
        }
    }
}

/*后序遍历是先遍历左子树和右子树，最后打印根节点的值。这里的实现稍微复杂一些。
同样利用栈辅助，首先将左孩子都压入栈中，然后检查栈顶节点的右孩子，若存在且未被访问过，
则转向右孩子。否则，说明当前节点可以被打印了，弹出栈顶节点并打印值，然后将 last 指向当前节点，最后将当前节点置空。*/
